// Code generated by kun; DO NOT EDIT.
// github.com/RussellLuo/kun

package helloworldgrpc

import (
	"context"

	"github.com/RussellLuo/kun/examples/helloworldgrpc/pb"
	"github.com/RussellLuo/kun/pkg/grpccodec"
	kitgrpc "github.com/go-kit/kit/transport/grpc"
)

type grpcServer struct {
	pb.UnimplementedServiceServer

	sayHello kitgrpc.Handler
}

func (s *grpcServer) SayHello(ctx context.Context, req *pb.SayHelloRequest) (*pb.SayHelloResponse, error) {
	_, resp, err := s.sayHello.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return resp.(*pb.SayHelloResponse), nil
}

func NewGRPCServer(svc Service, codecs grpccodec.Codecs) pb.ServiceServer {
	var codec grpccodec.Codec
	s := new(grpcServer)

	codec = codecs.EncodeDecoder("SayHello")
	s.sayHello = kitgrpc.NewServer(
		MakeEndpointOfSayHello(svc),
		decodeSayHelloRequest(codec),
		encodeSayHelloResponse(codec),
	)

	return s
}

// decodeSayHelloRequest converts a gRPC request to an endpoint request.
func decodeSayHelloRequest(codec grpccodec.Codec) kitgrpc.DecodeRequestFunc {
	return func(_ context.Context, grpcReq interface{}) (interface{}, error) {
		var req SayHelloRequest
		pb := grpcReq.(*pb.SayHelloRequest)
		if err := codec.DecodeRequest(pb, &req); err != nil {
			return nil, err
		}
		return &req, nil
	}
}

// encodeSayHelloResponse converts an endpoint response to a gRPC response.
func encodeSayHelloResponse(codec grpccodec.Codec) kitgrpc.EncodeResponseFunc {
	return func(_ context.Context, response interface{}) (interface{}, error) {
		pb := new(pb.SayHelloResponse)
		resp := response.(*SayHelloResponse)
		if err := codec.EncodeResponse(resp, pb); err != nil {
			return nil, err
		}
		return pb, nil
	}
}
