package annotation

import (
	"strings"
)

const (
	Name = "kok"

	DirectivePrefix = "//" + Name + ":"

	FileHeader = `// Code generated by ` + Name + `; DO NOT EDIT.
// github.com/RussellLuo/` + Name + `
`
)

var (
	DirectiveHTTPOp      = FromSubDirective("op")
	DirectiveHTTPParam   = FromSubDirective("param")
	DirectiveHTTPBody    = FromSubDirective("body")
	DirectiveHTTPSuccess = FromSubDirective("success")
	DirectiveHTTPOAS     = FromSubDirective("oas")
	DirectiveHTTPAlias   = FromSubDirective("alias")

	DirectiveGRPC = FromSubDirective("grpc")
)

type Directive string

func FromSubDirective(s string) Directive {
	return Directive(DirectivePrefix + s)
}

func (d Directive) IsValid() bool {
	return strings.HasPrefix(string(d), DirectivePrefix)
}

func (d Directive) Dialect() Dialect {
	if !d.IsValid() {
		return DialectUnknown
	}

	if d.SubDirective() == DirectiveGRPC.SubDirective() {
		return DialectGRPC
	}
	return DialectHTTP
}

func (d Directive) SubDirective() string {
	if !d.IsValid() {
		return ""
	}

	remaining := strings.TrimPrefix(d.String(), DirectivePrefix)
	return strings.Fields(remaining)[0]
}

func (d Directive) String() string {
	if !d.IsValid() {
		return ""
	}

	return string(d)
}

type Dialect string

const (
	DialectUnknown Dialect = ""
	DialectHTTP    Dialect = "http"
	DialectGRPC    Dialect = "grpc"
)
