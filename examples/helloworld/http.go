// Code generated by kok; DO NOT EDIT.
// github.com/RussellLuo/kok

package helloworld

import (
	"context"
	"net/http"

	"github.com/RussellLuo/kok/pkg/codec/httpcodec"
	"github.com/RussellLuo/kok/pkg/oasv2"
	"github.com/go-chi/chi"
	kithttp "github.com/go-kit/kit/transport/http"
)

func NewHTTPRouter(svc Service, codecs httpcodec.Codecs) chi.Router {
	return NewHTTPRouterWithOAS(svc, codecs, nil)
}

func NewHTTPRouterWithOAS(svc Service, codecs httpcodec.Codecs, schema oasv2.Schema) chi.Router {
	r := chi.NewRouter()

	if schema != nil {
		r.Method("GET", "/api", oasv2.Handler(OASv2APIDoc, schema))
	}

	var codec httpcodec.Codec
	var options []kithttp.ServerOption

	codec = codecs.EncodeDecoder("SayHello")
	r.Method(
		"POST", "/messages",
		kithttp.NewServer(
			MakeEndpointOfSayHello(svc),
			decodeSayHelloRequest(codec),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(options,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	return r
}

func decodeSayHelloRequest(codec httpcodec.Codec) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req SayHelloRequest

		if err := codec.DecodeRequestBody(r, &_req); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}
